# baed on http://stackoverflow.com/questions/14088294/multithreaded-web-server-in-python

from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SocketServer import ThreadingMixIn
import threading
import re
import argparse
import httplib
import signal
import socket
import os
import subprocess


nodeList = []
neighbours = []
cur_port = 8080


class Node():
    def __init__(self, ip, port):
        #pass
        #self.n_id = n_id
        self.neighbours = []
        self.ip = ip
        self.port = port

    def add(host, commandline, stdout=None, stderr=None, wait=False):
        #like launch in launch.py in first assignment
        cwd = os.getcwd()
        if host == 'localhost':
            pass
        else:
            commandline = "ssh -f %s 'cd %s; %s'" % (host, cwd, commandline)

        print commandline
        process = subprocess.Popen(commandline, shell=True, stdout=stdout, stderr=stderr)
        if wait:
            process.wait()

        pass

        #return ip:port of new node

    def shutdown():
        pass
        #might notify neighbours

    def neighbours():
        pass

        #return list of ip:port pairs of all nodes 
        #that are connected to the recipent node   



class Handler(BaseHTTPRequestHandler):
    def extract_key_from_path(self, path):
        return re.sub(r'/?(\w+)', r'\1', path)

    def do_GET(self):
        key = self.extract_key_from_path(self.path)
        
        if (key == "/neighbours"):
            #node.neighbours()
            #message = str(node.ip + node.port)
            #responsebody "127.0.0.1:1234, 127.0.0.1:5678 ..."
            pass


        self.send_response(200)
        self.end_headers()
        #message =  threading.currentThread().getName()
        message = "dildo"
        self.wfile.write(message)
        self.wfile.write('\n')
        return

    def do_POST(self):
        key = self.extract_key_from_path(self.path)
        self.send_response(200)
        self.end_headers()
        print("Key:" + key)
        if (key == "addNode"):
            print("Added node")
            #node = Node("127.0.0.1", "8081")
            node.add()
            #node.add(node.host, "./node.py --port=%d --nameserver=%s" % (node.port, nameserver))
            #responsebody "127.0.0.1:1234"
        if (key == "/shutdown"):
            pass
            #node.shutdown()
        

        message = (node.ip, node.port)


        self.wfile.write(message)



def parse_args():
    PORT_DEFAULT = 8080
    DIE_AFTER_SECONDS_DEFAULT = 20 * 60
    parser = argparse.ArgumentParser(prog="node", description="DHT Node")

    parser.add_argument("-p", "--port", type=int, default=PORT_DEFAULT,
            help="port number to listen on, default %d" % PORT_DEFAULT)

    parser.add_argument("--die-after-seconds", type=float,
            default=DIE_AFTER_SECONDS_DEFAULT,
            help="kill server after so many seconds have elapsed, " +
                "in case we forget or fail to kill it, " +
                "default %d (%d minutes)" % (DIE_AFTER_SECONDS_DEFAULT, DIE_AFTER_SECONDS_DEFAULT/60))

    parser.add_argument("--nameserver", type=str, required=False,
            help="address (host:port) of nameserver to register with")

    return parser.parse_args()


class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""



if __name__ == '__main__':
    args = parse_args()
    address = "%s:%d" % (socket.gethostname(), args.port)

    node = Node("localhost", str(cur_port))

    cur_port += 1


    server = ThreadedHTTPServer(('', args.port), Handler)
    #server = ThreadedHTTPServer(('localhost', 8080), Handler)
    def run_server():
        print 'Starting server, use <Ctrl-C> to stop'
        server.serve_forever()  
        print "Server has shut down"



    def shutdown_server_on_signal(signum, frame):
        print "We get signal (%s). Asking server to shut down" % signum
        server.shutdown()


    # Start server in a new thread, because server HTTPServer.serve_forever()
    # and HTTPServer.shutdown() must be called from separate threads
    #before killing/shut down a node, we need to start a new thread?!
    #different threads must kill each other
    thread = threading.Thread(target=run_server)
    thread.daemon = True
    thread.start()

    # Shut down on kill (SIGTERM) and Ctrl-C (SIGINT)
    signal.signal(signal.SIGTERM, shutdown_server_on_signal)
    signal.signal(signal.SIGINT, shutdown_server_on_signal)


    thread.join(args.die_after_seconds)
    if thread.isAlive():
        print "Reached %.3f second timeout. Asking server to shut down" % args.die_after_seconds
        server.shutdown()

    print "Exited cleanly"


    #nodes = Node()

    # Launch nodes
    #for node in nodes:
    #    launch(node.host, "./node.py --port=%d --nameserver=%s" % (node.port, nameserver))
          

